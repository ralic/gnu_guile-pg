\input texinfo  @c -*- mode: texinfo; coding: utf-8; -*-
@c %**start of header
@setfilename guile-pg.info
@settitle Guile-PG Manual
@documentencoding UTF-8
@ifinfo
@paragraphindent 0
@end ifinfo
@include relinfo.texi
@c %**end of header
@code{}
@setchapternewpage odd

@copying
This manual documents Guile-PG @value{VERSION}
(released @value{RELDATE}).

Copyright @copyright{} 2003--2015 Thien-Thi Nguyen@*
Copyright @copyright{} 1998 Ian Grant

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the appendix entitled
``GNU FDL''.
@end quotation
@end copying

@c Error index.
@defindex er
@synindex er cp
@syncodeindex vr cp
@syncodeindex fn cp

@macro bummer{x}
@erindex \x\ (error)
@end macro

@macro converter{x}
@vindex \x\ @r{(converter)}
@end macro

@macro zonkable{date,category}
@strong{NB}: This \category\ @strong{will be removed} by \date\.
@end macro

@dircategory Guile modules
@direntry
* Guile-PG: (guile-pg).           Access to PostgreSQL databases from Guile.
@end direntry

@titlepage
@title Guile-PG Manual
@subtitle The (database postgres*) Modules
@author Thien-Thi Nguyen
@author Ian Grant
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents

@ifnottex
@c ---------------------------------------------------------------------------
@node Top
@top  The (database postgres*) Modules

@insertcopying

Guile-PG is a collection of modules for Guile allowing access to the
@uref{http://www.postgresql.org, PostgreSQL RDBMS} from Scheme programs.

The low-level module @code{(database postgres)} provides an almost one-to-one
correspondence with the PostgreSQL @code{libpq} C library interface.  Other
higher-level modules, typically named @code{(database postgres-FOO)}, provide
abstractions and convenience procedures.
@end ifnottex

@menu
* Legalities::                  Your rights and freedoms.
* Quick Start::                 Overview and brief examples.

* Database Connections::        Groundwork for database interaction.
* Retrieving Data::             Making queries and accessing results.
* Writing/Reading Data::        Bulk data movement and I/O.
* Large Objects::               Large-Object support.
* Miscellaneous::               Everything else starting with @samp{pg-}.
* Not Included::                Functions left out for some reason.

* Query Construction::          Module: (database postgres-qcons).
* Displaying Results::          Module: (database postgres-resdisp).
* Octet Molding/Mashing::       Module: (database postgres-types).
* Column Definitions::          Module: (database postgres-col-defs).
* Result Transforms::           Module: (database postgres-resx).
* Single-Table Abstraction::    Module: (database postgres-table).
* Introspection::               Module: (database postgres-meta).
* Easy Interaction::            Module: (database postgres-gxrepl).

* Reporting Bugs::              When the going gets weird@dots{}
* GNU FDL::
* Index::
@end menu

@c ---------------------------------------------------------------------------
@node    Legalities
@chapter Legalities

@heading software

Guile-PG is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

Guile-PG is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Guile-PG.  If not, see @url{http://www.gnu.org/licenses/}.

@heading documentation

This manual is provided under the terms of the
GNU Free Documentation License (@pxref{GNU FDL}).

@c ---------------------------------------------------------------------------
@node    Quick Start
@chapter Quick Start

@cindex quick start
@cindex @code{use-modules}
To access a PostgreSQL database from Guile, first load the @code{postgres}
database module.  This is done using the @code{use-modules} syntax:

@lisp
(use-modules (database postgres))
@end lisp

@noindent
The next step is to make a connection to the database using the
@code{pg-connectdb} procedure.  Then, having created a valid connection to a
database server, we can use the @code{pg-exec} procedure to execute
queries and the other @code{pg-} procedures to retrieve the results of the
queries.

@cindex example session
@cindex session example
The following Guile session opens a connection and executes an
SQL statement on the @code{test} database on the default host (either
@code{localhost} or the host specified in the @code{PGHOST} environment
variable.)

@cartouche
@example
guile> (use-modules (database postgres))
guile> (define test (pg-connectdb "dbname=test"))
guile> test
#<PG-CONN:test::5432:>
guile> (define result (pg-exec test "SELECT * FROM PEOPLE"))
guile> result
#<PG-RESULT:TUPLES_OK:3:5>
@end example
@end cartouche

The @code{test} object is a @code{PG-CONN} type representing the database
connection.  Displaying the @code{PG-CONN} object shows that the serial number
of the connection is 1, that the database name is @code{test} on the default
host (the hostname field is empty) on port number 5432 and that the default
options were passed to the back-end.  This object is passed to @code{pg-exec}
which returns a @code{PG-RESULT} object representing the result of the SQL
statement executed on the server.  In this case, displaying the @code{PG-RESULT}
object shows us that the serial number of the result is 2, that the return code
from the database was @code{PGRES_TUPLES_OK} and that we have received 3 tuples
with 5 fields.

Having obtained a result object from the database we can find out how
many rows and how many columns are in the result.  We can also find out the
names of the columns:

@cartouche
@example
guile> (pg-ntuples result)
3
guile> (pg-nfields result)
5
guile> (pg-fname result 0)
"surname"
guile> (pg-fname result 1)
"firstname"
@end example
@end cartouche

To retrieve the data from the result we use the @code{pg-getvalue} procedure.
This takes a result object along with the row and column numbers and returns a
string containing that value.  @code{pg-getvalue} always returns a string: it
is up to the caller to convert this to whatever Scheme object they require.

@cartouche
@example
guile> (pg-getvalue result 0 0)
"Bitdiddle"
guile> (pg-getvalue result 0 1)
"Ben"
guile> (pg-getvalue result 1 0)
"Ator"
guile> (pg-getvalue result 1 1)
"Eva Lu"
@end example
@end cartouche

@cindex garbage collection
Guile-PG connections are closed when Guile's garbage collector
collects the discarded object.  This only happens when the connection itself
and all of the results of @code{pg-exec} are unreachable.  So to close the
connection we just rebind the results from that connection and the connection
symbol itself:

@cartouche
@example
guile> (define result '())
guile> (define test '())
@end example
@end cartouche

Typically though the result and connection variables will be @code{let}
bindings so the connection will usually be closed soon after the body of the
@code{let} returns.

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@include ref.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node    Reporting Bugs
@chapter Reporting Bugs

@cindex bugs, reporting
@cindex reporting bugs
Please send bug reports to @email{@value{BUGREPORT}}.
Make sure to include the Guile-PG version in the subject line.

If the bug is from a @code{make check} failure
(i.e., the build directory is available),
include the output of the @file{show-platform} script
and the log file of the test that failed (all in subdir @file{test/}).

Otherwise, include a small test case, a description of the expected
behavior and a description of the actual behavior.
If the maintainer can reproduce the problem using the test case,
there is a good chance it can be resolved.

@cindex homepage
There is one known bug we can't do anything about (we tried but failed):
The sourceforge folks don't want to update their site to point to the
new Guile-PG homepage @url{http://www.nongnu.org/guile-pg/}.

But if there are enough links to the new page, perhaps the
relevancy of sourceforge's obstinance will decline over time.

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node       GNU FDL
@unnumbered GNU FDL

@include fdl.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node       Index
@unnumbered Index

@printindex cp

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@bye
